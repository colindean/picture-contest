Getting started with Sinatra
============================

Writing a small Heroku-targeted app for accepting picture submissions

Technologies to be used
-----------------------

 * Ruby
 * Sinatra
 * MongoDB
 * Amazon S3
 * Sendgrid
 * Git 

 * Notable gems:
   * bundler
   * mongoid
   * heroku
   * datamapper
   * haml
   * thin

Assumptions
-----------

### You have Ruby installed and you have MongoDB installed.

Get [RVM](rvm.beginrescueend.com) and install Ruby 1.9.3.

Installing MongoDB is left as an exercise to the reader. A simple
`sudo apt-get install mongodb` is usually enough on Ubuntu.

### You understand Git.

Wrong? Go learn the basics. It will change your life.

### You have accounts with Heroku and Amazon Web Services.

* [Heroku](http://heroku.com)
* [Amazon Web Services](http://aws.amazon.com)

First things first
------------------
Step with me!

```
mkdir picture-contest
git init .
echo "rvm use --create 1.9.3@picture-contest" > .rvmrc
cd .. && cd -
```

Accept the RVM warning.

```
gem install bundler
bundle init
```

Edit the Gemfile, where Bundler's configuration is kept, to your liking. For
now, just add Sinatra, Haml, and Thin.

```
source "https://rubygems.org"
gem "sinatra" # site engine
gem "haml" # template engine
gem "thin" # web server
gem "heroku" #hosting service
```

Run `bundle install` to install the gems listed in your Gemfile. Several 
additional gems will be installed. These are *dependencies* of the gems we want.

We will add more gems to the Gemfile as we come across them.

Let's make our initial commit here with 

```
git add . 
git commit -m "Initial commit"
```

Sing away
---------

Create picture_contest.rb and stub out the first parts of what it is we want to
do

```
#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
Bundler.require

get '/' do
  'Picture contest!'
end
```

Save it and execute `bundle exec ruby picture_contest.rb`.

[Open it in your browser](http://localhost:4567) as directed and you should 
see "Picture contest!" in the browser window! If you do, you've just written
your first little Sinatra app!

Now's a great time to commit your work. Commit early, commit often.

```
git add picture_contest.rb
git commit
```

Crescendo
---------
Stub out the app more. We want a landing page with an upload form, an upload
handler, and a confirmation page that doubles as a way to view individual
photos that folks have submitted.

```
#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
Bundler.require

get '/' do ## show the landing page with an upload form
  #not much dynamic stuff to do here yet
  haml :index
end

post '/submit' do ## accept user submission
  #check if it's valid
  #upload picture to S3
  #store metadata in mongo, including path to image
  #get the id from mongo
  #redirect to the pic page
  redirect to('/pic/%s' % pic_id)
end

get '/pic/:id' do |id| ## show the picture with share links
  #load the requested id
  #get the image path on s3
  #show the image on the page
  haml :pic
end
```

Commit!

Views
-----
We need to create a template that Sinatra can render for our front page. Let's
keep it basic for now. Create a directory `views`, wherein our templates will 
reside.

views/layout.html
```
!!! 5
%html
  %head
    %title Picture contest!
  %body 
    %h1 Picture contest!
    =yield
```

views/index.haml
```
%p Participate in our picture contest by using the form to upload a picture!
%form{:action => '/submit', :method => :post}
  %fieldset
    %legend Upload your picture!
    %label{:for => 'name'}
      Name
    %input{:id => 'name', :name => 'name'}/
    %label{:for => 'email'}
      Email
    %input{:id => 'email', :name => 'email', :type => 'email'}/
    %label{:for => 'picture'}
      Picture
    %input{:id => 'picture', :name => 'picture', :type => 'file'}/
    %input{:type => 'submit', :value => 'Upload!'}/
```

Upload logic
------------

Now we get into the real meat of the matter! 

First, a neat tool since we'll be making mistakes inevitably!
-------------------------------------------------------------

This is a great time to install [Sinatra::Reloader](http://www.sinatrarb.com/contrib/reloader), an extension that automatically reloads a Sinatra app on each request. This way, one can make changes to the app without having to stop and restart the web server manually.

```
echo "gem 'sinatra-contrib'" >> Gemfile
bundle install
```

Add `require "sinatra/reloader" if development?` under the `Bundler.require` line in picture_contest.rb.

Make sure that your stuff is working and commit: `git commit -a -m "add sinatra-contrib for reloader"`.

Second, the gems we need for magic to work
------------------------------------------

```
echo "gem 'mongoid', '~> 2.4'" >> Gemfile
echo "gem 'bson_ext', '~> 1.5'" >> Gemfile
echo "gem 'aws-s3', :require => 'aws/s3'" >> Gemfile
bundle install
```

### [MongoDB](http://mongoid.org/docs/installation.html) stuff

Create a directory `config` and put this into `config/mongoid.yml`:

```
development:
  host: localhost
  database: picture_contest_development

test:
  host: localhost
  database: picture_contest_test

production:
  host: <%= ENV['MONGOID_HOST'] %>
  port: <%= ENV['MONGOID_PORT'] %>
  username: <%= ENV['MONGOID_USERNAME'] %>
  password: <%= ENV['MONGOID_PASSWORD'] %>
  database: <%= ENV['MONGOID_DATABASE'] %>
```

Add `Mongoid.load!("config/mongoid.yml")` to `picture_contest.rb` before the route definitions, on or around line 7. This tells Mongoid where to look for its connection information.

### [Amazon S3](http://amazon.rubyforge.org/) stuff


